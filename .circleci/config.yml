version: 2.1



#########################################################################


commands:
  
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs          
            

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-qokejfiwuh985u4uhiwu --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>

  revert-migrations:
     description: Revert the last migration
     parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
     steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/P6pukkntRpDMvq7zevjMqQ/migration_<< parameters.Workflow_ID >>)
              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm run migration:revert
              fi

#########################################################################
####################--BUILD FRONT END--##################################
#########################################################################
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


#########################################################################
####################--BUILD BACK END--###################################
#########################################################################

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd frontend
             npm install
             npm update
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

#########################################################################
####################--TEST FRONT END--###################################
#########################################################################

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend-Test
          command: |
             cd frontend
             npm install
             npm run test
      
#########################################################################
####################--TEST BACK END--####################################
#########################################################################

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-Test
          command: |
             cd backend
             npm install
             npm run test

#########################################################################
####################--SCAN FRONT END--###################################
#########################################################################
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
              cd frontend
              npm install
              npm audit fix --force
              npm audit fix --force
              npm audit --audit-level=critical

#########################################################################
####################--SCAN BACK END--####################################
#########################################################################

            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
              cd backend
              npm install
              npm audit fix --force
              npm audit fix --force
              npm audit --audit-level=critical


#########################################################################
####################--DEPLOY_INFRA--#####################################
#########################################################################
  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
           
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment    


#########################################################################
####################--CONFIGURE_INFRA--##################################
#########################################################################

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["a8:99:a4:97:7b:21:09:d5:13:c0:ec:ef:12:09:b5:c0"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |

        
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
    

#########################################################################
####################--RUN_MIRIGARIONS--##################################
#########################################################################

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install_awscli
      - run:
          name: Run migrations
          command: |
           
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/6MGwSSmVwViBzCC8RngKBz/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "ok"
            fi
      - destroy-environment
      - revert-migrations     


#########################################################################
####################--DEPLOY_FRONTEND--##################################
#########################################################################

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm update
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-qokejfiwuh985u4uhiwu --recursive
      - destroy-environment
      - revert-migrations


#########################################################################
####################--DEPLOY_BACKEND--###################################
#########################################################################

  deploy-backend:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a8:99:a4:97:7b:21:09:d5:13:c0:ec:ef:12:09:b5:c0"]
      - run:
          name: Install dependencies
          command: |
            apk add --update --no-cache tar gzip nodejs npm ansible aws-cli
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            echo $TYPEORM_ENTITIES
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations



#########################################################################
####################--SMOKE_TEST--#######################################
#########################################################################

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install curl
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-qokejfiwuh985u4uhiwu.s3-website-us-east-1.amazonaws.com
            if curl -s ${FRONTEND_WEBSITE} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            echo ${API_URL} 
            if curl -s ${API_URL}/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
  
      - destroy-environment
      - revert-migrations


#########################################################################
####################--CLOUDFRONT_UPDATE--################################
#########################################################################

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations


#########################################################################
####################--CLEANUP--##########################################
#########################################################################

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations,deploy-frontend]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]